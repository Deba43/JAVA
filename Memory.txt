A new Customer object referenced by customerObj will be created in the memory.

But how does it happen? 

The memory is logically divided into two primary sections - Stack and Heap.

All local variables and method invocations are stored in the stack

All objects along with their instance variables are stored in the heap

Please note that reference variables are also local variables. Reference variables are local variables which stores the address of another memory location.

The reference variable is created in the stack.

The object is created in the heap.

One reference variable can point to one and only one object at a time.

One object can be referenced by multiple reference variables at any given point of time.

----
Now that you have learnt how memory allocation happens, it is also important to know the process of deallocating the memory.

Sometimes, even though a resource in a program is unreachable or not in use, the memory used by that resource is not deallocated. This is called Memory leak and is undesirable.

In some languages, it is the programmer's responsibility for deallocating the memory occupied by such resources. Java, on the other hand, has a garbage collector which automatically deallocates the memory used by such resources. This prevents memory leak.

When an object does not have any reference, it becomes eligible for garbage collection.

You might be wondering when does an object not have any reference and become eligible for garbage collection?

When the reference variable pointing to the object is initialized to null, the object will not have any reference.

Objects eligible for garbage collection

When the reference variable is initialized to a new object and there is no reference to the previous object


Objects eligible for garbage collection

When a reference variable is local to some method, it will be removed from the stack as soon as the method finishes execution. The object pointed by the reference variable then becomes eligible for garbage collection.

